import pandas as pd

configfile: "config/config.yaml"

# Read the samples.tsv file into a pandas DataFrame
samples = pd.read_csv(config["samples"], sep="\t", index_col=0)
SAMPLE_IDS = samples.index.to_list()
CHR = config["chromosome"]

rule all:
    input:
        expand("results/vcf/{sample}_final_variants.vcf", sample=SAMPLE_IDS)

rule download_ref_genome:
    output:
        f"data/ref_genome/{CHR}.fa.gz"
    log:
        "logs/download_ref_genome.log"
    params:
        url = f"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/chromosomes/{CHR}.fa.gz"
    shell:
        "wget {params.url} -O {output} &> {log}"

rule index_genome:
    input:
        f"data/ref_genome/{CHR}.fa.gz"
    output:
        f"data/ref_genome/{CHR}bwaidx.bwt"
    log:
        "logs/index_genome.log"
    params:
        chr = CHR
    shell:
        """
        bwa index -p data/ref_genome/{params.chr}bwaidx -a bwtsw {input} &> {log}
        mv {params.chr}* data/ref_genome &>> {log}
        """

rule unzip_genome:
    input:
        f"data/ref_genome/{CHR}.fa.gz"
    output:
        f"data/ref_genome/{CHR}.fa"
    log:
        "logs/unzip_genome.log"
    shell:
        "gzip -d {input} &> {log}"

rule faidx_genome:
    input:
        f"data/ref_genome/{CHR}.fa"
    output:
        f"data/ref_genome/{CHR}.fa.fai"
    log:
        "logs/faidx_genome.log"
    shell:
        "samtools faidx {input} &> {log}"

rule bwa_aln:
    input:
        ref=f"data/ref_genome/{CHR}.fa.fai",
        fq1=lambda wildcards: samples.loc[wildcards.sample, "forward"],
        fq2=lambda wildcards: samples.loc[wildcards.sample, "reverse"]
    output:
        sai1="results/sai/{sample}_1.sai",
        sai2="results/sai/{sample}_2.sai"
    params:
        chromosome=f"{CHR}bwaidx"
    log:
        "logs/bwa_aln_{sample}.log"
    threads: 4
    shell:
        """
        mkdir -p results/sai
        bwa aln -t {threads} data/ref_genome/{params.chromosome} {input.fq1} > {output.sai1} 2>> {log}
        bwa aln -t {threads} data/ref_genome/{params.chromosome} {input.fq2} > {output.sai2} 2>> {log}
        """

rule bwa_sampe:
    input:
        ref=f"data/ref_genome/{CHR}.fa.fai",
        sai1="results/sai/{sample}_1.sai",
        sai2="results/sai/{sample}_2.sai",
        fq1=lambda wildcards: samples.loc[wildcards.sample, "forward"],
        fq2=lambda wildcards: samples.loc[wildcards.sample, "reverse"]
    output:
        "results/sam/{sample}.sam"
    params:
        chromosome=f"{CHR}bwaidx"
    log:
        "logs/bwa_sampe_{sample}.log"
    shell:
        "bwa sampe data/ref_genome/{params.chromosome} {input.sai1} {input.sai2} {input.fq1} {input.fq2} > {output} 2>> {log}"

rule sam_to_bam:
    input:
        "results/sam/{sample}.sam"
    output:
        "results/bam/{sample}.bam"
    log:
        "logs/sam_to_bam_{sample}.log"
    shell:
        "samtools view -bS {input} > {output} 2>> {log}"

rule sort_bam:
    input:
        "results/bam/{sample}.bam"
    output:
        "results/bam/{sample}_sorted.bam"
    log:
        "logs/sort_bam_{sample}.log"
    shell:
        "samtools sort {input} -o {output} 2>> {log}"

rule index_bam:
    input:
        "results/bam/{sample}_sorted.bam"
    output:
        "results/bam/{sample}_sorted.bam.bai"
    log:
        "logs/index_bam_{sample}.log"
    shell:
        "samtools index {input} 2>> {log}"

rule mpileup:
    input:
        bam="results/bam/{sample}_sorted.bam",
        ref=f"data/ref_genome/{CHR}.fa"
    output:
        "results/bcf/{sample}_raw.bcf"
    log:
        "logs/mpileup_{sample}.log"
    shell:
        "bcftools mpileup -O b -o {output} -f {input.ref} {input.bam} 2>> {log}"

rule call_variants:
    input:
        "results/bcf/{sample}_raw.bcf"
    output:
        "results/vcf/{sample}_variants.vcf"
    log:
        "logs/call_variants_{sample}.log"
    shell:
        "bcftools call --ploidy 1 -m -v -o {output} {input} 2>> {log}"

rule filter_variants:
    input:
        "results/vcf/{sample}_variants.vcf"
    output:
        "results/vcf/{sample}_final_variants.vcf"
    log:
        "logs/filter_variants_{sample}.log"
    shell:
        "vcfutils.pl varFilter {input} > {output} 2>> {log}"